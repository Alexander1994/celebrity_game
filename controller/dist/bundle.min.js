(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
module.exports={
  "env": {
    "prod": {
      "signaling_server_url": "celebritygamesignalingserver-env-1.3xaq596cgf.us-east-2.elasticbeanstalk.com",
      "signaling_server_port": 9090,
      "public": false
    },
    "dev": {
      "signaling_server_url": "127.0.0.1",
      "signaling_server_port": 9090,
      "public": false
    },
    "app": {
      "signaling_server_url": "celebritygamesignalingserver-env-1.3xaq596cgf.us-east-2.elasticbeanstalk.com",
      "signaling_server_port": 9090,
      "public": true
    }
  },
  "curr_env": "app"
}

},{}],2:[function(require,module,exports){
"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var env_json_1 = __importDefault(require("./env.json"));
var env = env_json_1.default.env[env_json_1.default.curr_env];
exports.env = env;

},{"./env.json":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.States = {
    start: "start",
    player_data: "player_data",
    pre_game: "pre_game",
    celeb_name_phase: "celeb_name_phase",
    pre_game_start: "pre_game_start",
    game_phase: "game_phase",
    waiting_phase: "waiting_phase",
    score_phase: "score_phase"
};
var Loader = /** @class */ (function () {
    function Loader() {
    }
    Loader.setState = function (state) {
        Loader.currentState = state;
        for (var i = 0; i < Loader.stateEls.length; i++) {
            var stateEl = Loader.stateEls[i];
            if (stateEl.id === state) {
                stateEl.style.display = "block";
            }
            else if (stateEl.style.display === "block") {
                stateEl.style.display = "none";
            }
        }
    };
    Loader.stateEls = document.querySelectorAll(".state");
    Loader.currentState = exports.States.start;
    return Loader;
}());
exports.Loader = Loader;

},{}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var ServerConnection_1 = require("./ServerConnection");
var ReconnectStorage = /** @class */ (function () {
    function ReconnectStorage() {
        this.reconnectKey = "ReconnectKey";
    }
    ReconnectStorage.prototype.setReconnectID = function (playerConnID) {
        localStorage.setItem(this.reconnectKey, playerConnID);
    };
    ReconnectStorage.prototype.removeReconnectToken = function () {
        localStorage.removeItem(this.reconnectKey);
    };
    ReconnectStorage.prototype.isPreviousConnPresent = function () {
        return localStorage.getItem(this.reconnectKey) !== null;
    };
    ReconnectStorage.prototype.getPreviousPlayerConnID = function () {
        return localStorage.getItem(this.reconnectKey);
    };
    ReconnectStorage.prototype.getGameID = function () {
        return ServerConnection_1.ServerConnection.ExtractGameIDFromPlayerID(this.getPreviousPlayerConnID());
    };
    return ReconnectStorage;
}());
exports.ReconnectStorage = ReconnectStorage;

},{"./ServerConnection":5}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var env_1 = require("../../../env/env");
var MessageTypes_1 = require("../../../shared/MessageTypes");
var ServerConnection = /** @class */ (function () {
    function ServerConnection(onMessage, onConnection) {
        this.serverName = env_1.env.signaling_server_url;
        this.port = env_1.env.signaling_server_port;
        this.connectionName = "ws://" + this.serverName + ":" + this.port;
        this.lastMessageDelay = 0;
        this.connectedToGame = false;
        this.serverConnection = new WebSocket(this.connectionName);
        //Messages received from the Signaling Server
        this.serverConnection.onmessage = onMessage.bind(this);
        this.serverConnection.onopen = function () {
            console.log("Connected to the signaling server.");
            onConnection();
        };
        this.serverConnection.onerror = function (err) {
            console.log("Got error on trying to connect to the signaling server:", err);
        };
    }
    ServerConnection.ExtractGameIDFromPlayerID = function (playerID) {
        return playerID.substr(0, 4);
    };
    ServerConnection.prototype.setPlayerID = function (playerID) {
        this.playerID = playerID;
    };
    ServerConnection.prototype.setGameID = function (gameID) {
        this.gameID = gameID;
    };
    ServerConnection.prototype.close = function () {
        this.serverConnection.close();
    };
    ServerConnection.prototype.sendTimeSync = function () {
        this.send({
            src: this.gameID,
            dest: "server",
            type: MessageTypes_1.Msg_Type.Time_Sync,
            data: {}
        });
        this.syncTimeSent = ServerConnection.currUnixTime();
    };
    ServerConnection.prototype.recvTimeSync = function (msgData) {
        var recvTime = ServerConnection.currUnixTime();
        var rtt = recvTime - this.syncTimeSent;
        ServerConnection.serverTimeDiff = msgData.server_time - (recvTime - rtt / 2);
    };
    // Helpers, etc.
    ServerConnection.currUnixTime = function () {
        return (new Date()).getTime() + ServerConnection.serverTimeDiff;
    };
    ServerConnection.currTimeDisplay = function () {
        return ServerConnection.timeToDisplay(ServerConnection.currUnixTime());
    };
    ServerConnection.timeToDisplay = function (time) {
        return (new Date(time)).toTimeString().replace(/.*(\d{2}:\d{2}:\d{2}).*/, "$1");
    };
    ServerConnection.prototype.joinGame = function (gameID) {
        this.gameID = gameID;
        this.send({
            src: "new_player",
            dest: gameID,
            type: MessageTypes_1.Msg_Type.Join_Game
        });
    };
    ServerConnection.prototype.reconnectAs = function (gameID, playerID) {
        this.send({
            src: playerID,
            dest: gameID,
            type: MessageTypes_1.Msg_Type.Reconnect,
            data: {
                msg_data_type: MessageTypes_1.Msg_Data_Type.Reconnect
            }
        });
    };
    ServerConnection.prototype.passMsg = function (msgData) {
        msgData.time_sent = ServerConnection.currUnixTime();
        this.send({
            src: this.playerID,
            dest: this.gameID,
            type: MessageTypes_1.Msg_Type.Pass_Msg,
            data: msgData
        });
    };
    ServerConnection.prototype.setMsgDelay = function (message) {
        var currentUnixTime = ServerConnection.currUnixTime();
        if ("data" in message && "time_sent" in message.data) {
            this.lastMessageDelay = currentUnixTime - message.data.time_sent;
        }
    };
    ServerConnection.prototype.timeToGameStart = function () {
        return this.lastMessageDelay * 3;
    };
    ServerConnection.prototype.send = function (message) {
        console.log("sending...", ServerConnection.currTimeDisplay());
        console.log(message);
        console.trace();
        this.serverConnection.send(JSON.stringify(message));
    };
    // time sync
    ServerConnection.serverTimeDiff = 0;
    return ServerConnection;
}());
exports.ServerConnection = ServerConnection;

},{"../../../env/env":2,"../../../shared/MessageTypes":9}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// Shared
var CountDown_1 = require("../../../shared/CountDown");
var Helpers_1 = require("../../../shared/Helpers");
var MessageTypes_1 = require("../../../shared/MessageTypes");
// Local
var Loader_1 = require("./Loader");
var ServerConnection_1 = require("./ServerConnection");
var ReconnectStorage_1 = require("./ReconnectStorage");
Loader_1.Loader.setState(Loader_1.States.start);
var reconnStorage = new ReconnectStorage_1.ReconnectStorage();
var peerConnection = new ServerConnection_1.ServerConnection(onMessage, function () {
    peerConnection.sendTimeSync();
    if (reconnStorage.isPreviousConnPresent()) {
        var prevPlayerID = reconnStorage.getPreviousPlayerConnID();
        var prevGameID = reconnStorage.getGameID();
        peerConnection.reconnectAs(prevGameID, prevPlayerID);
    }
});
function onMessage(event) {
    var message = JSON.parse(event.data);
    this.setMsgDelay(message);
    console.log("message received: ", ServerConnection_1.ServerConnection.currTimeDisplay());
    console.log(message);
    if (message.type === MessageTypes_1.Msg_Type.Time_Sync) {
        peerConnection.recvTimeSync(message.data);
    }
    else if (message.type === MessageTypes_1.Msg_Type.Join_Game) {
        peerConnection.setPlayerID(message.dest);
        reconnStorage.setReconnectID(message.dest);
        if (message.success) {
            Loader_1.Loader.setState(Loader_1.States.player_data);
        }
        else {
            alert("invalid Game ID");
        }
    }
    else if (message.type === MessageTypes_1.Msg_Type.Leave) {
        alert("The Game app has lost connection with the server");
        reconnStorage.removeReconnectToken();
    }
    else if (message.type === MessageTypes_1.Msg_Type.Reconnect) {
        onReconnect(message);
    }
    else if (message.type === MessageTypes_1.Msg_Type.Pass_Msg) {
        switch (message.data.msg_data_type) {
            case MessageTypes_1.Msg_Data_Type.CurrentPlayersTurn:
                onCurrentPlayersTurn(message.data);
                break;
            case MessageTypes_1.Msg_Data_Type.Response:
                onResponse(message.data);
                break;
            case MessageTypes_1.Msg_Data_Type.GameConfiguration:
                onGameConfiguration(message.data);
                break;
            case MessageTypes_1.Msg_Data_Type.PlayerTurnData:
                onPlayerTurnData(message.data);
                break;
            default:
                alert("msg with invalid data type received");
                break;
        }
    }
}
function onCurrentPlayersTurn(msgData) {
    var playersTurn = msgData;
    if (playersTurn.end_of_game !== undefined) {
        Helpers_1.display(gameOver);
        reconnStorage.removeReconnectToken();
    }
    if (playersTurn.is_players_turn) {
        Helpers_1.display(gameConfiguration);
        Helpers_1.display(startGameBtn);
        Helpers_1.displayList(startYourTurnBtn);
    }
    else {
        Helpers_1.hide(gameConfiguration);
        Helpers_1.hide(startGameBtn);
        Helpers_1.hideList(startYourTurnBtn);
    }
}
function onResponse(msgData) {
    var response = msgData;
    if (response.success) {
        if (response.sent_msg === MessageTypes_1.Msg_Data_Type.CanStartGame) {
            sendStartGameMsg();
        }
    }
    else {
        alert(response.error_msg);
    }
}
function onGameConfiguration(msgData) {
    Loader_1.Loader.setState(Loader_1.States.celeb_name_phase);
    gameConfig = msgData;
}
function onPlayerTurnData(msgData) {
    var turnData = msgData;
    resetGameState(turnData.celebs);
    if (celebList.length === 0) {
        Loader_1.Loader.setState(Loader_1.States.waiting_phase);
    }
    else {
        updateCurrentCeleb();
    }
}
function onReconnect(msg) {
    if (!msg.success) {
        reconnStorage.removeReconnectToken();
    }
    else {
        peerConnection.setPlayerID(msg.dest);
        peerConnection.setGameID(msg.src);
        var reconnectMsg = msg.data;
        gameConfig = reconnectMsg.game_config;
        if (reconnectMsg.is_curr_players_action) {
            onCurrentPlayersTurn({
                msg_data_type: MessageTypes_1.Msg_Data_Type.CurrentPlayersTurn,
                is_players_turn: true,
            });
        }
        var currGameState = Loader_1.States[reconnectMsg.reconnect_state];
        if (currGameState === Loader_1.States.pre_game) {
            preGameWelcome.innerText = "Welcome " + reconnectMsg.players_name + "!";
        }
        Loader_1.Loader.setState(currGameState);
    }
}
// Start
var connectGameBtn = document.querySelector("#connectGameBtn");
var gameIDInput = document.querySelector("#gameIDInput");
connectGameBtn.addEventListener("click", function (event) {
    peerConnection.joinGame(gameIDInput.value.toUpperCase());
});
// Player Data
var playerNameInput = document.querySelector("#playerNameInput");
var playerDataBtn = document.querySelector("#playerDataBtn");
var playerTeamSelect = document.querySelector("#playerTeamSelect");
playerDataBtn.addEventListener("click", function (event) {
    var name = playerNameInput.value;
    if (name === "") {
        alert("please enter a name");
        return;
    }
    var team = parseInt(playerTeamSelect.value);
    peerConnection.passMsg({
        msg_data_type: MessageTypes_1.Msg_Data_Type.PlayerInfo,
        player_name: name,
        player_team: team
    });
    preGameWelcome.innerText = "Welcome " + name + "!";
    Loader_1.Loader.setState(Loader_1.States.pre_game);
});
// Pre Game
var playerTurnLengthInput = document.querySelector("#playerTurnLengthInput");
var losePointOnSkipCheckBox = document.querySelector("#losePointOnSkipCheckBox");
var sendGameConfigurationBtn = document.querySelector("#sendGameConfigurationBtn");
var gameConfiguration = document.querySelector("#gameConfiguration");
var preGameWelcome = document.querySelector("#preGameWelcome");
sendGameConfigurationBtn.addEventListener("click", function (ev) {
    var gameLength = parseInt(playerTurnLengthInput.value);
    if (isNaN(gameLength) || gameLength <= 0) {
        alert("Please enter a valid time length");
        return;
    }
    var gameConfigurationMsg = {
        msg_data_type: MessageTypes_1.Msg_Data_Type.GameConfiguration,
        turn_length: gameLength,
        lose_point_on_skip: losePointOnSkipCheckBox.checked
    };
    peerConnection.passMsg(gameConfigurationMsg);
});
// Celeb Name Phase
var celebNameInput = document.querySelector("#celebNameInput");
var sendCelebBtn = document.querySelector("#sendCelebBtn");
sendCelebBtn.addEventListener("click", function () {
    var celebName = celebNameInput.value;
    if (celebName.trim() === "") {
        alert("Please enter a celeb name");
        return;
    }
    celebNameInput.value = "";
    var celebNameMsg = {
        msg_data_type: MessageTypes_1.Msg_Data_Type.CelebName,
        celeb_name: celebName
    };
    peerConnection.passMsg(celebNameMsg);
});
var startGameBtn = document.querySelector("#startGameBtn");
startGameBtn.addEventListener("click", function () {
    var canStartGameMsg = {
        msg_data_type: MessageTypes_1.Msg_Data_Type.CanStartGame,
    };
    peerConnection.passMsg(canStartGameMsg);
});
// pre_game_start
var countDownTimer = document.querySelector("#countDownTimer");
var preGameLoading = document.querySelector("#preGameLoading");
var timerLength = 3;
var timer = CountDown_1.newCountDown(timerLength, countDownTimer, function () {
    Loader_1.Loader.setState(Loader_1.States.game_phase);
    gamePhaseTimer = setTimeout(function () {
        endOfGamePhaseCB(false);
    }, gameConfig.turn_length * 1000);
});
// waiting_phase
var startYourTurnBtn = document.querySelectorAll(".startYourTurnBtn");
var gameOver = document.querySelector("#gameOver");
function sendStartGameMsg() {
    var timeToGameStart = peerConnection.timeToGameStart();
    var currUnixTime = ServerConnection_1.ServerConnection.currUnixTime();
    var startGameTime = currUnixTime + timeToGameStart;
    setTimeout(function () {
        timer.start();
        Helpers_1.hide(preGameLoading);
    }, timeToGameStart);
    var startGame = {
        msg_data_type: MessageTypes_1.Msg_Data_Type.StartGame,
        game_start_time: startGameTime
    };
    peerConnection.passMsg(startGame);
    Helpers_1.display(preGameLoading);
    Loader_1.Loader.setState(Loader_1.States.pre_game_start);
}
startYourTurnBtn.forEach(function (b) { return b.addEventListener("click", sendStartGameMsg); });
// game_phase
var celebList = [];
var currCelebIndex = 0;
var skippedCelebList = [];
var guessedCelebList = [];
var currCeleb = document.querySelector("#currCeleb");
var nextBtn = document.querySelector("#nextBtn");
var skipBtn = document.querySelector("#skipBtn");
var outOfPlayerDisplay = document.querySelector("#outOfPlayerDisplay");
function endOfGamePhaseCB(outOfPlayers) {
    (outOfPlayers) ? Helpers_1.display(outOfPlayerDisplay) : Helpers_1.hide(outOfPlayerDisplay);
    var score = guessedCelebList.length;
    if (gameConfig.lose_point_on_skip) {
        score -= skippedCelebList.length;
    }
    var uintScore = (score >= 0) ? score : 0;
    setScorePhaseData(uintScore);
    Loader_1.Loader.setState(Loader_1.States.score_phase);
    var turnScore = {
        msg_data_type: MessageTypes_1.Msg_Data_Type.TurnScore,
        score: uintScore,
        unused_celebs: celebList.slice(currCelebIndex)
    };
    peerConnection.passMsg(turnScore);
}
var gameConfig;
var gamePhaseTimer; // game phase timeout timer id
function resetGameState(celebArr) {
    currCelebIndex = 0;
    skippedCelebList = [];
    guessedCelebList = [];
    celebList = (celebArr === undefined) ? [] : celebArr;
}
skipBtn.addEventListener("click", function () {
    skippedCelebList.push(celebList[currCelebIndex]);
    currCelebIndex++;
    updateCurrentCeleb();
});
nextBtn.addEventListener("click", function () {
    guessedCelebList.push(celebList[currCelebIndex]);
    currCelebIndex++;
    updateCurrentCeleb();
});
function updateCurrentCeleb() {
    if (currCelebIndex < celebList.length)
        currCeleb.innerText = celebList[currCelebIndex];
    else { // end round
        // cancel timer
        clearTimeout(gamePhaseTimer);
        // tell the game the round is over and the score from the final turn
        endOfGamePhaseCB(true);
    }
}
// score_phase
var skipped = document.querySelector("#skipped");
var guessed = document.querySelector("#guessed");
var totalScore = document.querySelector("#totalScore");
function setScorePhaseData(score) {
    skipped.innerText = "Questions skipped: " + skippedCelebList.length;
    guessed.innerText = "Correctly guessed questions: " + guessedCelebList.length;
    totalScore.innerText = "Current round score: " + score;
}

},{"../../../shared/CountDown":7,"../../../shared/Helpers":8,"../../../shared/MessageTypes":9,"./Loader":3,"./ReconnectStorage":4,"./ServerConnection":5}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var timeToStr = function (time) {
    var minutes = (time / 60) | 0;
    var seconds = (time % 60) | 0;
    var minuteStr = (minutes < 10 ? "0" : "") + minutes;
    var secondStr = (seconds < 10 ? "0" : "") + seconds;
    return minuteStr + ":" + secondStr;
};
function newCountDown(duration, ui, cb) {
    var END_TIME_VAL = -1;
    var time = duration, display = timeToStr(duration), start, timeoutID;
    var getTime = function () { return (new Date()).getTime(); };
    var resetTimerState = function () {
        display = timeToStr(duration);
        time = duration;
    };
    function timer() {
        ui.innerText = display; // 00:10
        timeoutID = setTimeout(timer, Math.max((start + (duration - time + 1) * 1000) - getTime(), 0));
        time--; // 9
        display = timeToStr(time); // 00:09
        if (time === END_TIME_VAL) {
            cb();
            clearTimeout(timeoutID);
            return;
        }
    }
    return {
        stop: function () {
            clearTimeout(timeoutID);
        },
        start: function () {
            resetTimerState();
            start = getTime();
            timer();
        },
        stopAndCallCB: function () {
            cb();
            this.stop();
        },
        isActive: function () {
            return time !== END_TIME_VAL;
        }
    };
}
exports.newCountDown = newCountDown;

},{}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var hide = function (el) { return el.style.display = "none"; };
exports.hide = hide;
var display = function (el) { return el.style.display = "block"; };
exports.display = display;
var hideList = function (els) { return els.forEach(function (el) { return hide(el); }); };
exports.hideList = hideList;
var displayList = function (els) { return els.forEach(function (el) { return display(el); }); };
exports.displayList = displayList;

},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Msg_Type;
(function (Msg_Type) {
    Msg_Type["Create_Game"] = "create_game";
    Msg_Type["Join_Game"] = "join_game";
    Msg_Type["Pass_Msg"] = "pass_msg";
    Msg_Type["Leave"] = "leave";
    Msg_Type["Reconnect"] = "reconnect";
    Msg_Type["Broadcast"] = "broadcast";
    Msg_Type["Broadcast_To_All_Except"] = "broadcast_to_all_except";
    Msg_Type["Time_Sync"] = "time_sync";
})(Msg_Type = exports.Msg_Type || (exports.Msg_Type = {}));
var Msg_Data_Type;
(function (Msg_Data_Type) {
    Msg_Data_Type[Msg_Data_Type["PlayerInfo"] = 0] = "PlayerInfo";
    Msg_Data_Type[Msg_Data_Type["CelebName"] = 1] = "CelebName";
    Msg_Data_Type[Msg_Data_Type["StartGame"] = 2] = "StartGame";
    Msg_Data_Type[Msg_Data_Type["PlayerTurnData"] = 3] = "PlayerTurnData";
    Msg_Data_Type[Msg_Data_Type["TurnStart"] = 4] = "TurnStart";
    Msg_Data_Type[Msg_Data_Type["CurrentPlayersTurn"] = 5] = "CurrentPlayersTurn";
    Msg_Data_Type[Msg_Data_Type["Response"] = 6] = "Response";
    Msg_Data_Type[Msg_Data_Type["GameConfiguration"] = 7] = "GameConfiguration";
    Msg_Data_Type[Msg_Data_Type["TurnScore"] = 8] = "TurnScore";
    Msg_Data_Type[Msg_Data_Type["CanStartGame"] = 9] = "CanStartGame";
    Msg_Data_Type[Msg_Data_Type["Reconnect"] = 10] = "Reconnect";
    Msg_Data_Type[Msg_Data_Type["TimeSync"] = 11] = "TimeSync";
})(Msg_Data_Type = exports.Msg_Data_Type || (exports.Msg_Data_Type = {}));
// Maps to controller states
var Reconnect_State;
(function (Reconnect_State) {
    Reconnect_State["Player_Data"] = "player_data";
    Reconnect_State["Pre_Game"] = "pre_game";
    Reconnect_State["Celeb_Name_Phase"] = "celeb_name_phase";
    Reconnect_State["Waiting_Phase"] = "waiting_phase";
})(Reconnect_State = exports.Reconnect_State || (exports.Reconnect_State = {}));

},{}]},{},[6]);
